// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250409152053_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categorys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99c00af1-2be2-4c83-a4a3-35f2ad326bb5"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5347),
                            Description = "Áo Ngắn Tay",
                            Name = "T-SHIRTS"
                        },
                        new
                        {
                            Id = new Guid("a12dd0e4-3ea2-42e8-bfbd-e2daba5b6931"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5352),
                            Description = "Quần",
                            Name = "PANTS"
                        },
                        new
                        {
                            Id = new Guid("a59e7340-2a4a-4384-8b9e-2264c462cdfa"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5354),
                            Description = "Áo khoác",
                            Name = "JACKETS"
                        },
                        new
                        {
                            Id = new Guid("719730c6-6e98-4300-a064-7c5673ce2f50"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5359),
                            Description = "Sweater",
                            Name = "HOODIES & SWEATSHIRTS"
                        },
                        new
                        {
                            Id = new Guid("84947687-13e1-40c8-8b6e-28f1ae4c8931"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5361),
                            Description = "Áo sơ mi",
                            Name = "SHIRT"
                        });
                });

            modelBuilder.Entity("api.Models.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("api.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7430380-19f5-4591-b708-cb11d5da6d3c"),
                            LastUpdated = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5548),
                            ProductId = new Guid("1f1ee017-6d3a-46f8-839a-3b41330fbf17"),
                            Stock = 2000
                        },
                        new
                        {
                            Id = new Guid("33229381-9474-44c9-a8b0-89d4b89697d2"),
                            LastUpdated = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5555),
                            ProductId = new Guid("7a2f9e3b-8a15-4c0b-b784-693c0e20d8a9"),
                            Stock = 2000
                        },
                        new
                        {
                            Id = new Guid("b761b899-f763-4c80-90c3-c2642060ddff"),
                            LastUpdated = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5557),
                            ProductId = new Guid("a572cd2d-72e4-4e1a-b3cc-84121a9f7a4e"),
                            Stock = 2000
                        },
                        new
                        {
                            Id = new Guid("ff2766df-fdf0-4084-a8a0-331d3c182c77"),
                            LastUpdated = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5559),
                            ProductId = new Guid("ec16787e-f650-4a7e-839e-f034b52f9273"),
                            Stock = 2000
                        },
                        new
                        {
                            Id = new Guid("d914cf21-3b10-41ab-bf44-90ecd169cd83"),
                            LastUpdated = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5563),
                            ProductId = new Guid("b8b19bdc-d9e6-4d1a-a25d-7c528f47db69"),
                            Stock = 2000
                        },
                        new
                        {
                            Id = new Guid("074e2e23-f0ad-4e76-80bc-23363f0b8da6"),
                            LastUpdated = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5566),
                            ProductId = new Guid("a742f0bd-6f85-4e50-9bc3-8b77b3061c77"),
                            Stock = 2000
                        },
                        new
                        {
                            Id = new Guid("6b3ee517-ccf8-49e1-a209-acc4684b29ed"),
                            LastUpdated = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5568),
                            ProductId = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            Stock = 2000
                        });
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotolPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("api.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProducId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("api.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f1ee017-6d3a-46f8-839a-3b41330fbf17"),
                            CategoryId = new Guid("99c00af1-2be2-4c83-a4a3-35f2ad326bb5"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5407),
                            Description = "Chiếc áo được làm từ chất liệu vải tổng hợp giúp người mặc cảm thấy thoải mái",
                            ImageUrl = "aophong.png",
                            Name = "Áo phông nam ngắn tay",
                            Price = 999000m,
                            StockQuantity = 1000
                        },
                        new
                        {
                            Id = new Guid("7a2f9e3b-8a15-4c0b-b784-693c0e20d8a9"),
                            CategoryId = new Guid("99c00af1-2be2-4c83-a4a3-35f2ad326bb5"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5422),
                            Description = "Chiếc áo được làm từ chất liệu vải tổng hợp giúp người mặc cảm thấy thoải mái",
                            ImageUrl = "aopolo.png",
                            Name = "Áo polo nam",
                            Price = 1999000m,
                            StockQuantity = 1000
                        },
                        new
                        {
                            Id = new Guid("a572cd2d-72e4-4e1a-b3cc-84121a9f7a4e"),
                            CategoryId = new Guid("719730c6-6e98-4300-a064-7c5673ce2f50"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5425),
                            Description = "Chiếc áo hoodie với form dáng oversize, chất liệu vải dày dặn",
                            ImageUrl = "aohoodie.png",
                            Name = "Áo hoodie",
                            Price = 299000m,
                            StockQuantity = 1000
                        },
                        new
                        {
                            Id = new Guid("ec16787e-f650-4a7e-839e-f034b52f9273"),
                            CategoryId = new Guid("a59e7340-2a4a-4384-8b9e-2264c462cdfa"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5429),
                            Description = "Chiếu áo này mặc vào là đẹp",
                            ImageUrl = "aokhoacgio.png",
                            Name = "Áo khoác gió 2 lớp",
                            Price = 599000m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("b8b19bdc-d9e6-4d1a-a25d-7c528f47db69"),
                            CategoryId = new Guid("a12dd0e4-3ea2-42e8-bfbd-e2daba5b6931"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5437),
                            Description = "Quần jeans ống rộng phong cách Unisex",
                            ImageUrl = "quanjeans.png",
                            Name = "Quần jeans ống rộng",
                            Price = 599000m,
                            StockQuantity = 500
                        },
                        new
                        {
                            Id = new Guid("a742f0bd-6f85-4e50-9bc3-8b77b3061c77"),
                            CategoryId = new Guid("a12dd0e4-3ea2-42e8-bfbd-e2daba5b6931"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5441),
                            Description = "Quần nỉ ống rộng phong cách Unisex",
                            ImageUrl = "quanni.png",
                            Name = "Quần nỉ ống rộng",
                            Price = 599000m,
                            StockQuantity = 500
                        },
                        new
                        {
                            Id = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            CategoryId = new Guid("a12dd0e4-3ea2-42e8-bfbd-e2daba5b6931"),
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5444),
                            Description = "Quần short phong cách Unisex",
                            ImageUrl = "quanshort.png",
                            Name = "Quần short",
                            Price = 99000m,
                            StockQuantity = 500
                        });
                });

            modelBuilder.Entity("api.Models.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0671087-a8f4-4d64-8a5d-7d40572242f7"),
                            Color = "Đen",
                            ImageUrl = "",
                            Price = 99000m,
                            ProductId = new Guid("1f1ee017-6d3a-46f8-839a-3b41330fbf17"),
                            Size = "M",
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("e73e7945-1ed3-411a-acdb-03d0a22f62b1"),
                            Color = "Đen",
                            ImageUrl = "",
                            Price = 99000m,
                            ProductId = new Guid("1f1ee017-6d3a-46f8-839a-3b41330fbf17"),
                            Size = "L",
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("950a5a81-1b72-4051-b2dd-6c8d8d14c826"),
                            Color = "Xanh",
                            ImageUrl = "",
                            Price = 99000m,
                            ProductId = new Guid("1f1ee017-6d3a-46f8-839a-3b41330fbf17"),
                            Size = "XXL",
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("8667ad5a-8a69-41cc-9086-39d9b2913bc1"),
                            Color = "Trắng",
                            ImageUrl = "",
                            Price = 99000m,
                            ProductId = new Guid("ec16787e-f650-4a7e-839e-f034b52f9273"),
                            Size = "L",
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("3661a452-e6ec-4321-8b67-2573e3e832c3"),
                            Color = "Trắng",
                            ImageUrl = "",
                            Price = 99000m,
                            Size = "XL",
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("165b3f25-1df3-4027-b420-ce2814ad7adf"),
                            Color = "Xanh",
                            ImageUrl = "",
                            Price = 99000m,
                            Size = "28",
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("a70d8fdb-d661-4165-9c70-d649838e016a"),
                            Color = "Đỏ",
                            ImageUrl = "",
                            Price = 99000m,
                            Size = "L",
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("3e10e4f2-60fb-49ba-9d69-bd045a7bfd5f"),
                            Color = "Trắng",
                            ImageUrl = "",
                            Price = 99000m,
                            Size = "L",
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("b8b19bdc-d9e6-4d1a-a25d-7c528f47db69"),
                            Color = "Trắng",
                            ImageUrl = "",
                            Price = 99000m,
                            Size = "L",
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("a572cd2d-72e4-4e1a-b3cc-84121a9f7a4e"),
                            Color = "Trắng",
                            ImageUrl = "",
                            Price = 99000m,
                            Size = "L",
                            Stock = 100
                        });
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5714531a-a8e7-43cd-a8e0-1485cf5bcd61"),
                            Comment = "Áo đẹp lắm",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5635),
                            ProductId = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            Rating = 5
                        },
                        new
                        {
                            Id = new Guid("63303959-e830-4b1c-92fd-e359ee68179e"),
                            Comment = "Nice",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5642),
                            ProductId = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            Rating = 4
                        },
                        new
                        {
                            Id = new Guid("d0aea518-4ca9-479e-89ac-85eb8a3772f4"),
                            Comment = "Nice",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5644),
                            ProductId = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            Rating = 4
                        },
                        new
                        {
                            Id = new Guid("75ae32cf-877a-47a2-a65e-3d12f6852157"),
                            Comment = "Nice",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5647),
                            ProductId = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            Rating = 4
                        },
                        new
                        {
                            Id = new Guid("40da1610-c1bb-45ea-951d-b9f2dd9a10f4"),
                            Comment = "Nice",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5649),
                            ProductId = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            Rating = 4
                        },
                        new
                        {
                            Id = new Guid("da5a54d9-823e-41d5-9204-25520287e7cb"),
                            Comment = "Nice",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5654),
                            ProductId = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            Rating = 4
                        },
                        new
                        {
                            Id = new Guid("08e3e86c-0ee8-46d4-b55a-f2a695410d21"),
                            Comment = "Nice",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5656),
                            ProductId = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            Rating = 4
                        },
                        new
                        {
                            Id = new Guid("002c9902-54d9-499d-a044-6ed6822326bf"),
                            Comment = "Nice",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5659),
                            ProductId = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            Rating = 4
                        },
                        new
                        {
                            Id = new Guid("0c6a110f-57e1-4867-99ef-e3db5f402276"),
                            Comment = "Nice",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5661),
                            ProductId = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            Rating = 4
                        },
                        new
                        {
                            Id = new Guid("54265749-7400-41f5-a49f-74f4b134ad0d"),
                            Comment = "Nice",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5665),
                            ProductId = new Guid("e917a7f8-8a12-4df7-bd32-904b2e53b6fa"),
                            Rating = 4
                        });
                });

            modelBuilder.Entity("api.Models.Shipping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shippings");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4c1467-1426-4b97-902c-bacb85f56cc0"),
                            Address = "Ha Noi",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5183),
                            Email = "jd.shopfashion@gmail.com",
                            FirstName = "",
                            LastName = "",
                            Password = "asdasd123123",
                            Phone = "0123456789",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5186),
                            Username = "jdshop"
                        },
                        new
                        {
                            Id = new Guid("556ee2c5-6eab-4e10-bfa0-8f2f99003ff8"),
                            Address = "Ha Noi",
                            CreatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5213),
                            Email = "jd.shopfashion1@gmail.com",
                            FirstName = "",
                            LastName = "",
                            Password = "asdasd123123",
                            Phone = "0123456789",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 4, 9, 15, 20, 53, 696, DateTimeKind.Utc).AddTicks(5213),
                            Username = "jdshop"
                        });
                });

            modelBuilder.Entity("api.Models.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("api.Models.Cart", b =>
                {
                    b.HasOne("api.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("api.Models.OrderItem", b =>
                {
                    b.HasOne("api.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("api.Models.Payment", b =>
                {
                    b.HasOne("api.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.HasOne("api.Models.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("api.Models.ProductVariant", b =>
                {
                    b.HasOne("api.Models.Product", null)
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.HasOne("api.Models.Product", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("api.Models.Wishlist", b =>
                {
                    b.HasOne("api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("ProductVariants");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
